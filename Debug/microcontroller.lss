
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006de  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000243  00000000  00000000  00000ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  78:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setLED>:

#include <avr/io.h>
#define F_CPU 8000000UL      /speed of the cpu/
void setLED(void)
{
	PORTB |=0B00100000; // force 5th bit to 1
  80:	85 b1       	in	r24, 0x05	; 5
  82:	80 62       	ori	r24, 0x20	; 32
  84:	85 b9       	out	0x05, r24	; 5
  86:	08 95       	ret

00000088 <clearLED>:
}
void clearLED(void)
{
	PORTB &=0B11011111; // force 5th bit to 0
  88:	85 b1       	in	r24, 0x05	; 5
  8a:	8f 7d       	andi	r24, 0xDF	; 223
  8c:	85 b9       	out	0x05, r24	; 5
  8e:	08 95       	ret

00000090 <buttonStatus>:
}
int buttonStatus(void)
{
	
	return (PIND & 0B00000001);
  90:	89 b1       	in	r24, 0x09	; 9
}
  92:	81 70       	andi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <main>:
int main(void)
{
	//DDRD =DDRD & 0B11111110; // forcing 0th bit to 0
	//similerly
	DDRD &= 0B11111110;
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0B00100000; // forcing 5th bit to 1
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	84 b9       	out	0x04, r24	; 4
    /* Replace with your application code */
    while (1) 
    {
		
		
		if (buttonStatus())
  a4:	0e 94 48 00 	call	0x90	; 0x90 <buttonStatus>
  a8:	89 2b       	or	r24, r25
  aa:	19 f0       	breq	.+6      	; 0xb2 <main+0x1a>
		{
			clearLED();
  ac:	0e 94 44 00 	call	0x88	; 0x88 <clearLED>
  b0:	f9 cf       	rjmp	.-14     	; 0xa4 <main+0xc>
		}
		else
		{
			setLED();
  b2:	0e 94 40 00 	call	0x80	; 0x80 <setLED>
  b6:	f6 cf       	rjmp	.-20     	; 0xa4 <main+0xc>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
